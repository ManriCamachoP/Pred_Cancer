---
title: "1_regresion_logistica"
format: html
editor: visual
---

# Configuración general

```{r}
# Configuración base de R: 
rm(list = ls(all.names = TRUE))

# Semillas:
RNGkind(sample.kind = "Rounding")

# Semilla para los análisis aleatorios: 
set.seed(1234)
```

## Librerías

```{r}
pacman::p_load(
  # Lectura y manipulación de datos: 
  tidyverse, magrittr, rio, here,
  
  # Tablas de frecuencia, gráficos y demás:
  ggthemes, scales
)
```


## Datos

```{r}
# Cargar la base de datos:
base = read_csv("C:/Users/Ivan RC/Desktop/OneDrive - Universidad Latina/I-2024/2. Análisis Multivariado/Proyectos/Pred_Cancer/data/processed/data.csv")

# Vizualizar la base:
base

# Mutar ciertas variables que deben ser factor y están numéricas: 
# base %>% 
#   mutate(
#     #State = factor(State, labels = "Arkansas"),
#     Sex = factor(Sex, labels = c("Male", "Female")),
#     Marital = factor(Marital, labels = c("Maried",  "Divorced",
#                                          "Widowed", "Separated",
#                                          "Never Married", "A member of unmarried couple",
#                                          "Refused")),
#     Race = factor(Race, labels = c("White only", "Black only",
#                                    "American-Indian or Alaskan Native", "Asian only",
#                                    "Native Hawaiian or other Pacific Islander only",
#                                    "Multiracial, Non Hispanic", "Hispanic",
#                                    "Don’t know, Not sure or Don’t Respond")),
#     Education = factor(Education, labels = c("Never attended Kindergarten", 
#                                              "Elementary School",
#                                              "Highschool (not finished)",
#                                              "Highschool (finished)",
#                                              "College (not finished)",
#                                              "College graduate",
#                                              "Refused")),
#     # GeneralHealth = factor(GeneralHealth, labels = c("Excellent", "Very good",
#     #                                                  "Good", "Fair",
#     #                                                  "Poor", "Don’t know or not sure",
#     #                                                  "Refused")),
#     Exercise = factor(Exercise, labels = c("Yes", "No", 
#                                            "Don’t know or not sure", "Refused")),
#     TypeSmoker = factor(TypeSmoker, labels = c("Everyday smoker", "Smoke some days",
#                                                "Former smoker", "Never smoked")),
#     WalkingDiff = factor(WalkingDiff, labels = c("Yes", "No",
#                                                  "Don’t know or not sure", "Refused")),
#     MentalDis = factor(MentalDis, labels = c("Yes", "No",
#                                              "Don’t know or not sure", "Refused")),
#     EverMammo = factor(EverMammo, labels = c("Yes", "No",
#                                              "Don’t know or not sure", "Refused")),
#     TimeMammo = factor(TimeMammo, labels = c("Within a year", "Within two years",
#                                              "Within three years", "Within five years",
#                                              "Five or more years", "Don’t know or not sure",
#                                              "Refused")),
#     DiffCancer = factor(DiffCancer, labels = c("Only one", "Two",
#                                                "Three or more", "Don’t know or not sure",
#                                                "Refused"))
#   )
```

```{r}
# Cargar los paquetes necesarios
library(dplyr)
library(purrr)

# Crear una función que genere una tabla de frecuencias para cada columna de un data frame
tabla_frecuencias <- function(data) {
  # Verificar que el argumento es un data frame
  if (!is.data.frame(data)) {
    stop("El argumento debe ser un data frame")
  }
  
  # Usar map para iterar sobre las columnas del data frame y aplicar la función table
  tablas <- map(data, ~ table(.x, useNA = "ifany"))
  
  return(tablas)
}


resultados <- tabla_frecuencias(base)

# Imprimir los resultados
print(resultados)

```



